#!/bin/sh

#	History
#	015	GLK	231110	Minor cleanup
#	014	GLK	231017	Support mask in IPcmp (8 bit chunks) in hex or decimal format
#	013	GLK	231015	Handle bridged devices (seeing 'master' in ip show addr output)
#	012	GLK	230804	Goodbye Jump. 169.254 should not be the main IP
#	011	GLK	230627	Missing virbr0 from virtual names
#	010	GLK	230530	Use loop type instead of 127.x for loopback IP check, aliases in IFxxIPA if more than one
#	009	GLK	230108	Support bridge members in MEM
#	008	GLK	221114	Recognize vmbrX for Proxmox
#	007	GLK	221011	Fib: on FreeBSD
#	006	GLK	220626	Docker or Linux bridging names interaces with 'br-' that can't be in variable names
#	005	GLK	220223	Virtual IPs in VIP instead of WIP/LIP
#	004	GLK	211213	New entry in ip show addr output - altname enp0s31f6 - ad as IFdevALT
#	003	GLK	210511	Take wifi if no ethernet is active for IFEXT
#	002	GLK	210511	Fix dual ext/int for int-first scans, separate IFLOC for loopback devices
#	001	GLK	210407	Add auto IP detection, fix some Wifi (assume "duplex" in media: line means ethernet)
#

IfProbe()
 {
	(which 'ip' >/dev/null 2>&1 && ip addr show || ifconfig -a) | awk -v gOS="$(uname -s)" '

		function Empty() {
			# Empty for each interface (not global for all)
			dName = ""
			dAddr = ""
			dAdIn = 0
			dAlia = ""
			dMask = ""
			dAdd6 = ""
			dPfx6 = ""
			dMacA = ""
			dType = ""
			dMedi = ""
			dMemb = ""
			dActi = ""
			dStat = ""
			dFlag = ""
			dSSID = ""
			dMTU = ""
			dPID = ""
			dPwr = ""
			dAltN = ""
			dFib = ""
			dGrp = ""
			dBdg = ""
		 }

		function IPcmp(a, b, m, aa, bb) {
			split(a, aa, ".")
			split(b, bb, ".")
			if ("" == m)
				m = 32
			else if (substr(m, 1, 2) == "0x")
			 {
				m = 4 * (index(substr(m, 3), "0") - 1)	# Bits in mask e.g. 0xfff00000 is 12 (4 * (4 - 1))
				if (m < 0) m = 32
			 }
			for (i = 0; i < 4 && m > 0; i++)
			 {
				if (aa[i] < bb[i])
					return -1
				else if (bb[i] < aa[i])
					return 1
				m = m - 8
			 }
			return 0
		 }

		function IfOut() {
			if (dAll == "")
				dAll = dName
			else
				dAll = dAll " " dName

			ac=0
			if ("active" == dActi)
			 {
				dActive = dActive == "" ? dName : dActive " " dName
				ac=1
			 }
			else if ("running" == dActi)
			 {
				dRun = dRun == "" ? dName : dRun " " dName
				ac=1
			 }
			else if ("no" == dActi)
				dActi = ""

			if (dAddr != "")
			 {
				print "IF" dName "IP=" dAddr
				if (dType == "tunnel" || dType == "virtual")
				 {
					dVip = dVip == "" ? dAddr : dVip " " dAddr
				 }
				else if ("loop" != dType && "slave" != dType)
				 {
					# 0 undefined, 1 auto internal, 2 internal, <0 public
					if (dAddr ~ /^192.168.|^172.1[6-9]\.|^172.2[0-9]\.|^172.3[0-1]\.|^10\./)
					 {
						dAdIn = 2
						dLan = dLan == "" ? dName : dLan " " dName
						if (dLip == "")
							dLip = dAddr
						else
						 {
							c = IPcmp(dAddr, dLip, dMask)
							
							if (0 == c)	# Same LAN?
								dLip = dLip " " dAddr
							else if (c > 1)
							 {
								dWip = dLip	# Assume DMZ to this IP by convention
								dLip = dAddr
							 }
							else if (dWip == "")
							 {
								dAdIn = -1	# Pretend public IP (DMZ)
								dWip = dAddr
							 }
						 }
					 }
					else if (dAddr ~ /^169.254\./)
					 {
						dAut = dAut == "" ? dName : dAut " " dName
						dAip = dAddr
						dAdIn = 1
					 }
					else if (dAddr != "")
					 {
						dAdIn = -1	# Public IP
						dWan = dWan == "" ? dName : dWan " " dName
						dWip = dAddr
					 }
				 }
			 }

			if (dAdIn != 0) print "IF" dName "INT=" dAdIn
			if (dMask != "") print "IF" dName "MSK=" dMask
			if (dAlia != "" && dAlia != dAddr) print "IF" dName "IPA=\"" dAlia "\""
			if (dAdd6 != "") print "IF" dName "IP6=" dAdd6
			if (dPfx6 != "") print "IF" dName "PF6=" dPfx6
			if (dMacA != "") print "IF" dName "MAC=" dMacA
			if (dType != "") print "IF" dName "TYPE=" dType
			if (dMedi != "") print "IF" dName "MED=" dMedi
			if (dMemb != "") print "IF" dName "MEM=\"" dMemb "\""
			if (dActi != "") print "IF" dName "ACT=" dActi
			if (dStat != "") print "IF" dName "UP=" dStat
			if (dFlag != "") print "IF" dName "FLAG=\"" dFlag "\""
			if (dMTU != "") print "IF" dName "MTU=" dMTU
			if (dPID != "") print "IF" dName "PID=" dPID
			if (dSSID != "") print "IF" dName "SSID=" dSSID
			if (dPwr != "") print "IF" dName "PWR=" dPwr
			if (dAltN != "") print "IF" dName "ALT=" dAltN
			if (dFib != "") print "IF" dName "FIB=" dFib
			if (dGrp != "") print "IF" dName "GRP=" dGrp
			if (dBdg != "") print "IF" dName "BDG=" dBdg

			# Switch is a gnu awk extension
			if ("tunnel" == dType)
				dTun = dTun == "" ? dName : dTun " " dName
			else if ("loop" == dType)		# Localhost
				dLoc = dLoc == "" ? dName : dLoc " " dName
			else if ("slave" == dType)		# Localhost
				dSlave = dSlave == "" ? dName : dSlave " " dName
			else if ("bridge" == dType)
				dMstr = dMstr == "" ? dName : dMstr " " dName
			else if (dName ~ /^awdl/ || dName ~ /^llw/)		# Apple Wireless Direct / Low Latency Wireless
				dOther = dOther == "" ? dName : dOther " " dName
			else if ("wifi" == dType || (gOS == "Linux" && dName ~ /^w/))	# Can not see a way to identify on Linux other than first character
				dWifi = dWifi == "" ? dName : dWifi " " dName
			else if ("virtual" == dType)
				dVir = dVir == "" ? dName : dVir " " dName
			else if ("ether" == dType || "bridge" == dType)
			 {
				dEth = dEth == "" ? dName : dEth " " dName
				if ("ether" == dType)
				 {
					++ dECnt
					dGate = dGate + ac
				 }
				# print "** IN: " dAdIn " : " ac " : " dInt " : " dExt " : " dAddr
				if (ac > 0)
				 {
					# Logic should be if Pub - Ext = Pub, If one Ext = One, If two priv Ext = lower IP (convention only - affects this stanza and dLip above)
					dAEth = dAEth == "" ? dName : dAEth " " dName
					if (dAdIn > 1)
					 {
						if (dExt == "")		# If only one active, it is "External"
						 {
							dGIP = dAddr
							dExt = dName
						 }
						else if (IPcmp(dAddr, dGIP) < 0)
						 {
							dInt = dInt == "" ? dExt : dInt " " dExt
							dExt = dName
							dGIP = dAddr
						 }
						else
							dInt = dInt == "" ? dName : dInt " " dName
					 }
					else if (dAdIn < 0)
					 {
						if (dGIP != "")
						 {
							dInt = dInt == "" ? dExt : dInt " " dExt
							dExt = ""
							dGIP = ""
						 }
						dExt = dExt == "" ? dName : dExt " " dName
					 }
					else if (!dAdIn)
					 {
						e = "NoIPbutActive=" dName
						dErr = dErr == "" ? e : dErr ":" e
						print "IF" dName "ERR=NoIP"
					 }
				 }
			 }
			else
				dOther = (dOther == "") ? dName : dOther " " dName

			Empty()
		 }

		BEGIN {
			dErr = ""
			dAll = ""
			dAut = ""
			dAip = ""
			dWifi = ""
			dEth = ""
			dAEth = ""
			dOther = ""
			dSlave = ""
			dMstr = ""
			dActive = ""
			dRun = ""
			dLoc = ""
			dLan = ""
			dWan = ""
			dLip = ""
			dVip = ""
			dWip = ""
			dInt = ""
			dExt = ""
			dVir = ""
			dTun = ""
			dGIP = ""
			dECnt = 0
			dGate = 0
			Empty();
		 }

		// {
			# Are we starting a new device? E.g. en0: .* mtu .*
			if ($1 ~ /.*:/ && index($1, ":") == index($0, ":"))
			 {
				# print "*** NEW DEVICE: " $0
				if (dName != "")
					IfOut()
				dName = 1
				if ($2 ~ /.*:/)
					dName = 2
				dName = substr($dName, 1, length($dName) - 1)
				if (left = index($0, "<"))
				 {
					right = index($0, ">")
					split(substr($0, left + 1, right - left - 1), a, ",")
					for (f in a)
					 {
						dFlag = (dFlag == "") ? a[f] : dFlag " " a[f]

						if ("NO-CARRIER" == a[f])
							dActi = "no"
						else if ("LOOPBACK" == a[f])
							dType = "loop"
						else if ("POINTOPOINT" == a[f])
							dType = "tunnel"

						if ("no" != dActi && ("RUNNING" == a[f] || "LOWER_UP" == a[f]))
							dActi = "running"
					 }	
					# mtu 1500 qdisc pfifo_fast master br0 state UP group default qlen 1000 (example)
					split(substr($0, right), a, " ")
					for (f in a)
					 {
						if ("mtu" == a[f])
							dMTU = a[1 + f]
						else if ("master" == a[f])
						 {
							# dBdg = dBdg == "" ? a[f + 1] : dBdg " " a[f + 1]
							dType = "slave"
						 }
					 }
				 }

				if ((atLoc = index(dName, "@")) > 0)
					dName = substr(dName, 0, atLoc - 1)
				if ((gsub("\\.", "_", dName) > 0) || (index(dName, "docker") > 0) || (index(dName, "lxcbr") > 0) || (index(dName, "virbr") > 0) || (atLoc > 0))
					dType = "virtual"
				else if (((atLoc = index(dName, "-")) > 0) || (1 == index(dName, "vmbr")) || (1 == index(dName, "br")))
				 {
					dType = "bridge"
					dBdg = dBdg == "" ? dName : dBdg "" dName
					if (atLoc > 0)
						dName = substr(dName, 0, atLoc - 1) "_" substr(dName, atLoc +1)
				 }

				if ($3 == "mtu")
					dMTU = $4
			   }
			else if ("inet" == $1)
			 {
				if ($2 !~ /^169.254\./)
				 {
					dAddr = $2
					dMask = $4
					dCast = $6
					split(dAddr, a, "/")
					dAddr=a[1]
					if (a[2] != "") dMask = a[2]
					if (dActi == "running") dActi = "active"
				 }
				dAlia = dAlia == "" ? $2 : dAlia " " $2
			 }
			else if ("inet6" == $1)
			 {
				dAdd6 = $2
				dPfx6 = $4
				split(dAdd6, a, "/")
				dAdd6=a[1]
				if (a[2] != "") dPfx6=a[2]
				split(dAdd6, a, "%")
				dAdd6=a[1]
				if (dActi == "running") dActi = "active"
			 }
			else if ($1 ~ /link\/.*/)
			 {
				split($1, a, "/")
				if (dType == "")
					dType = a[2]
				dMacA = $2
			 }
			else if ($1 ~ /^options=.*/)
			 {
				# RXCSUM indicates hardware line (darwin)?
				if (dType == "")
				 {
					if ($1 ~ /.*RX.*/)
						dType = "ether"
					else if (dMTU == 1500)
						dType = "wifi"
				 }
			 }
			else if ($1 ~ /^capabilities=.*/)
			 {
				# CSUM indicates hardware line (BSD)?
				if (dType == "")
				 {
					if ($1 ~ /.*CSUM.*/)
						dType = "ether"
					else if (dMTU == 1500)
						dType = "wifi"
				 }
			 }
			else if ("ether" == $1 || "address:" == $1)
				dMacA = $2
			else if ("status:" == $1)
				dActi = $2
			else if ("Opened" == $1)
				dPID = $4
			else if ("media:" == $1)
			 {
				dMedi = $2
				if (dMedi == "Ethernet" || $0 ~ /.*-duplex.*/)	# Not on Darwin  || dMedi == "autoselect")
					dType = "ether"
				if (dMedi ~ /.*unknown.*/)
					dMedi = "unknown"
			 }
			else if ($1 == "nd6" || $1 == "valid_lft" || $1 == "device" || $1 == "loop" || $1 == "TX" || $1 == "RX" || $1 ~ /^ec_capabilities=/ || $1 ~ /^enabled=/ || $1 ~ /^ec_enabled=/)
				dLast = $1
			else if ("ssid" == $1)
				dSSID = $2
			else if ("powersave" == $1)
				dPwr = $2
			else if ("altname" == $1)
				dAltN = $2
			else if ("fib:" == $1)
				dFib = $2
			else if ("groups:" == $1)
			 {
				dGrp = $2
				if ("wg" == dGrp)
					dType = "tunnel"
				else if ("lo" == dGrp)
					dType = "loop"
			 }
			else if ("member:" == $1)
				dMemb= ("" == dMemb) ? $2 : dMemb " " $2
			else
				print "IF" dName "_UNKNOWN=" "\"" $0 "\""
		 }

		END {
			if (dName != "")
				IfOut();

			# If no ethernet active... we will take a wifi
			if (dWifi != "" && dExt == "")
				dExt = dWifi

			print "IFSUPV=1.1.3.2023.11.10"			# Version of me
			print "IFALL=\"" dAll "\""				# All Devices
			print "IFAUTO=\"" dAut "\""				# Auto Config Devices
			print "IFAIP=\"" dAip "\""				# Auto Config IPs
			print "IFACT=\"" dActive "\""			# Configured Devices
			print "IFRUN=\"" dRun "\""				# Connected Unconfigured Devices
			print "IFWIFI=\"" dWifi "\""			# Wifi Devices
			print "IFETH=\"" dEth "\""				# Ethernet Devices
			print "IFATH=\"" dAEth "\""				# Active Ethernet
			print "IFTUN=\"" dTun "\""				# Tunnel Devices
			print "IFETC=\"" dOther "\""			# WTF
			print "IFSLV=\"" dSlave "\""			# Slave devices (no explicit dhcp e.g.)
			print "IFMST=\"" dMstr "\""				# Master devices - own the prior gnomes
			print "IFLOC=\"" dLoc "\""				# Localhost / Loopback
			print "IFLAN=\"" dLan "\""				# Private IP devices
			print "IFWAN=\"" dWan "\""				# Public IP devices
			print "IFLIP=\"" dLip "\""				# Private IP devices
			print "IFVIP=\"" dVip "\""				# Virtual (Container) IP devices
			print "IFWIP=\"" dWip "\""				# Public IP devices
			print "IFINT=\"" dInt "\""				# Internal IP ethernet
			print "IFEXT=\"" dExt "\""				# External IP ethernet
			print "IFVIR=\"" dVir "\""				# Virtual Interface (docker etc.)
			print "IFENUM=" dECnt					# Ethernet Device count
			print "IFGATE=" (dGate >= 2)			# Two or more connected ethernet ports?
			print "IFSUP=:"							# Use $IFSUP . $0 to only run me once
			if (1>2) print "IFV() \n {\n\teval IFQ=\\$IF$1$2\n }\n"	# Example: IFV lo0 IP; echo $IFQ
			if (dErr != "")
				print "IFSUPERR=" dErr
		}'
 }

IfProbe
